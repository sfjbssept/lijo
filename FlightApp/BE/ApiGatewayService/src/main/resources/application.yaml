spring:
  application:
    name: api-gateway-service
    
  # gateway configurations
  cloud:
    gateway:
      routes:
        # Flight admin service
        - id: FLIGHT-ADMIN-SERVICE
          uri: lb://FLIGHT-ADMIN-SERVICE
          predicates:
          - Path=/flight-admin-service/**
          filters:
          - StripPrefix=1
          - JwtAuthenticationFilter
        # Flight user  service
        - id: FLIGHT-USER-SERVICE
          uri: lb://FLIGHT-USER-SERVICE
          predicates:
          - Path=/flight-user-service/**
          filters:
          - StripPrefix=1
          - JwtAuthenticationFilter
        # Flight search  service
        - id: FLIGHT-SEARCH-SERVICE
          uri: lb://FLIGHT-SEARCH-SERVICE
          predicates:
          - Path=/flight-search-service/**
          filters:
          - StripPrefix=1
         # Flight booking  service
        - id: FLIGHT-BOOKING-SERVICE
          uri: lb://FLIGHT-BOOKING-SERVICE
          predicates:
          - Path=/flight-booking-service/**
          filters:
          - StripPrefix=1
          - JwtAuthenticationFilter
      #You can configure the gateway to control CORS behavior. The “global” CORS configuration is a map of URL patterns to Spring Framework CorsConfiguration.
      #https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#cors-configuration
      globalcors:
        cors-configurations:
          '[/**]':
            allowedOrigins: "http://localhost:4200"
            allowedHeaders: '*'
            allowedMethods:
              - GET
              - DELETE
              - POST
              - OPTIONS
         
    
server:
  port: 8090

jwt:
  secret: secretkey
  token:
    validity: 300000
  
#ignore null fields in json
#spring.jackson.default-property-inclusion=NON_NULL
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka
      
#actuator
management:
  endpoints:
    web:
      exposure:
        include: health,info,env,beans
  info:
    env:
      enabled: true

info:
  application:
    name: ${spring.application.name}
    description: Very cool Spring Boot application
    version: '@project.version@'
    spring-cloud-version: '@spring-cloud.version@'
    spring-boot-version: '@project.parent.version@'
  